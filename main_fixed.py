"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import asyncio
import json
import logging
import os

import redis.asyncio as aioredis
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery
from logging.handlers import TimedRotatingFileHandler

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from src.config.settings import load_config, TOKEN, REDIS_DSN, BOT_VERSION, CONFIG, ADMIN_ID
from src.config.translations import TRANSLATIONS as T
from src.database.connection import get_pool
from src.utils.middleware import RateLimit
from src.keyboards.user_keyboards import kb_main, kb_back
from src.keyboards.admin_keyboards import kb_admin

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = logging.getLogger("bot")
    logger.setLevel(logging.INFO)
    
    fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞
    h_info = TimedRotatingFileHandler("bot.log", when="midnight", backupCount=7, encoding="utf-8")
    h_info.setLevel(logging.INFO)
    h_info.setFormatter(fmt)
    logger.addHandler(h_info)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
    h_err = TimedRotatingFileHandler("error.log", when="midnight", backupCount=7, encoding="utf-8")
    h_err.setLevel(logging.ERROR)
    h_err.setFormatter(fmt)
    logger.addHandler(h_err)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.addHandler(logging.StreamHandler())
    
    return logger

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging()
    logger.info(f"–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ {BOT_VERSION}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    load_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    try:
        redis_cli = aioredis.from_url(REDIS_DSN)
        storage = RedisStorage(redis=redis_cli, state_ttl=3600)
        logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
    except Exception as e:
        logger.warning(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å: {e}")
        storage = None
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher(storage=storage) if storage else Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
    dp.message.middleware(RateLimit())
    dp.callback_query.middleware(RateLimit())
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        pool = await get_pool()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        pool = None
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        try:
            await message.answer(T["start"], reply_markup=kb_main())
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    
    @dp.message(Command("version"))
    async def cmd_version(message: Message):
        try:
            text = f"{T['version_pre']}{BOT_VERSION}\n\n"
            text += "üß© –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n"
            text += f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {sum(CONFIG['features'].values())}/{len(CONFIG['features'])} —Ñ—É–Ω–∫—Ü–∏–π\n"
            text += f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' if pool else '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'}\n"
            text += f"‚úÖ Redis: {'–ø–æ–¥–∫–ª—é—á–µ–Ω' if storage else '–æ—Ç–∫–ª—é—á–µ–Ω'}\n"
            text += "‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã\n"
            text += "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
            
            await message.answer(text, reply_markup=kb_back())
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /version –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /version: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏")
    
    @dp.message(Command("admin"))
    async def cmd_admin(message: Message):
        try:
            if message.from_user.id != ADMIN_ID:
                await message.answer(T["no_access"], reply_markup=kb_back())
                return
            
            await message.answer(T["admin_panel"], reply_markup=kb_admin())
            logger.info(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /admin: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
    
    @dp.message(Command("test"))
    async def cmd_test(message: Message):
        try:
            from src.utils.validators import validate_email, validate_nickname, validate_password
            
            tests = [
                f"üìß Email: {'‚úÖ' if validate_email('test@mail.ru') else '‚ùå'}",
                f"üë§ Nickname: {'‚úÖ' if validate_nickname('User123') else '‚ùå'}",
                f"üîê Password (eng): {'‚úÖ' if validate_password('password') else '‚ùå'}",
                f"üîê Password (rus): {'‚ùå' if validate_password('–ø–∞—Ä–æ–ª—å') else '‚úÖ'} (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)",
            ]
            
            text = "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:\n\n" + "\n".join(tests)
            text += f"\n\nüìä –°—Ç–∞—Ç—É—Å:\n"
            text += f"üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if pool else '‚ùå'}\n"
            text += f"üß† Redis FSM: {'‚úÖ' if storage else '‚ùå'}\n"
            text += f"üìã –§—É–Ω–∫—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ: {sum(CONFIG['features'].values())}"
            
            await message.answer(text, reply_markup=kb_back())
            logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –∑–∞–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª–µ–π")
    
    @dp.callback_query(F.data == "back_to_main")
    async def cb_back_main(callback: CallbackQuery):
        try:
            await callback.message.edit_text(T["start"], reply_markup=kb_main())
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback back_to_main: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    @dp.callback_query(F.data == "my_account")
    async def cb_my_account(callback: CallbackQuery):
        try:
            if not pool:
                await callback.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                return
                
            from src.database.user_operations import get_account_info
            accounts = await get_account_info(pool, callback.from_user.id)
            
            if not accounts:
                text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n" \
                       "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."
            else:
                text = "üîë –í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
                for i, (email, username, is_temp, temp_password) in enumerate(accounts, 1):
                    status = "üîÑ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å" if is_temp else "‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"
                    text += f"{i}. **{username}**\n"
                    text += f"   üìß {email}\n"
                    text += f"   üîê {status}\n\n"
                    
                text += "üí° –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            
            await callback.message.edit_text(text, reply_markup=kb_back())
            await callback.answer()
            logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ my_account: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö", show_alert=True)
    
    @dp.callback_query(F.data == "reg_start")
    async def cb_registration(callback: CallbackQuery):
        try:
            text = "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.\n\n" \
                   "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            await callback.message.edit_text(text, reply_markup=kb_back())
            await callback.answer()
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
    
    @dp.callback_query(F.data == "show_info")
    async def cb_show_info(callback: CallbackQuery):
        try:
            from src.utils.file_cache import FileCache
            info_cache = FileCache("connection_info.txt")
            text = await info_cache.get()
            
            if not text:
                text = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:\n\n" \
                       "üîó –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É " \
                       "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            await callback.message.edit_text(text, reply_markup=kb_back())
            await callback.answer()
            logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_info: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)
    
    @dp.callback_query(F.data == "show_news")
    async def cb_show_news(callback: CallbackQuery):
        try:
            from src.utils.file_cache import FileCache
            news_cache = FileCache("news.txt")
            text = await news_cache.get()
            
            if not text:
                text = "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n\n" \
                       "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.\n" \
                       "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            
            await callback.message.edit_text(text, reply_markup=kb_back())
            await callback.answer()
            logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_news: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π", show_alert=True)
    
    @dp.callback_query(F.data == "forgot")
    async def cb_forgot_password(callback: CallbackQuery):
        try:
            text = "üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.\n\n" \
                   "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            await callback.message.edit_text(text, reply_markup=kb_back())
            await callback.answer()
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ forgot password: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è", show_alert=True)
    
    @dp.callback_query(F.data == "show_changelog")
    async def cb_show_changelog(callback: CallbackQuery):
        try:
            try:
                with open("changelog.json", "r", encoding="utf-8") as f:
                    changelog = json.load(f)
                
                lines = []
                for ver in sorted(changelog.keys(), reverse=True):
                    lines.append(f"<b>{ver}</b>:")
                    for item in changelog[ver].get("ru", []):
                        lines.append(f"‚Ä¢ {item}")
                    lines.append("")
                
                text = "\n".join(lines).strip()
                if not text:
                    text = "üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞"
            except:
                text = "üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n\n" \
                       "‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n" \
                       "‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\n" \
                       "‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
            
            await callback.message.edit_text(text, reply_markup=kb_back())
            await callback.answer()
            logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä changelog –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ changelog: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=True)
    
    @dp.callback_query(F.data == "admin_check_db") 
    async def cb_admin_check_db(callback: CallbackQuery):
        try:
            if callback.from_user.id != ADMIN_ID:
                await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
                
            if pool:
                async with pool.acquire() as conn:
                    async with conn.cursor() as cur:
                        await cur.execute("SELECT COUNT(*) FROM battlenet_accounts")
                        count = (await cur.fetchone())[0]
                        text = f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\nüìä –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {count}"
            else:
                text = "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
                
            await callback.message.edit_text(text, reply_markup=kb_admin())
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    @dp.callback_query(F.data.in_(["admin_broadcast", "admin_download_log", "admin_delete_account", "admin_reload_config"]))
    async def cb_admin_other(callback: CallbackQuery):
        try:
            if callback.from_user.id != ADMIN_ID:
                await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            feature_names = {
                "admin_broadcast": "üì¢ –†–∞—Å—Å—ã–ª–∫–∞",
                "admin_download_log": "üìú –°–∫–∞—á–∞—Ç—å –ª–æ–≥", 
                "admin_delete_account": "üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                "admin_reload_config": "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            }
            
            text = f"{feature_names[callback.data]} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.\n\n" \
                   "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã:"
            
            await callback.message.edit_text(text, reply_markup=kb_admin())
            await callback.answer()
            logger.info(f"–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è {callback.data} –≤—ã–∑–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
    
    @dp.callback_query(F.data == "admin_main")
    async def cb_admin_main(callback: CallbackQuery):
        try:
            await callback.message.edit_text(T["start"], reply_markup=kb_main())
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_main: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=True)
    
    @dp.callback_query()
    async def cb_other(callback: CallbackQuery):
        try:
            await callback.answer("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback.data}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback handler: {e}")
    
    @dp.message()
    async def echo_handler(message: Message):
        try:
            help_text = (
                "ü§ñ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏\n" 
                "/test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π\n"
                "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "‚ú® –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!"
            )
            await message.answer(help_text, reply_markup=kb_main())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ echo handler: {e}")
    
    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (–±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)")
    logger.info("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling: {e}")
    finally:
        if pool:
            pool.close()
            await pool.wait_closed()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())