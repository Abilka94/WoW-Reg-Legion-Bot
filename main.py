"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥—É–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import asyncio
import json
import logging
import os
import secrets

import redis.asyncio as aioredis
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from logging.handlers import TimedRotatingFileHandler

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from src.config.settings import load_config, TOKEN, REDIS_DSN, BOT_VERSION, CONFIG, ADMIN_ID
from src.config.translations import TRANSLATIONS as T
from src.database.connection import get_pool
from src.database.user_operations import (
    get_account_info, delete_account, admin_delete_account,
    register_user, reset_password, change_password
)
from src.utils.middleware import RateLimit
from src.utils.validators import validate_email, validate_nickname, validate_password
from src.keyboards.user_keyboards import kb_main, kb_back
from src.keyboards.admin_keyboards import kb_admin, kb_admin_back
from src.states.user_states import RegistrationStates, ForgotPasswordStates, ChangePasswordStates, AdminStates

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = logging.getLogger("bot")
    logger.setLevel(logging.INFO)
    
    fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞
    h_info = TimedRotatingFileHandler("bot.log", when="midnight", backupCount=7, encoding="utf-8")
    h_info.setLevel(logging.INFO)
    h_info.setFormatter(fmt)
    logger.addHandler(h_info)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
    h_err = TimedRotatingFileHandler("error.log", when="midnight", backupCount=7, encoding="utf-8")
    h_err.setLevel(logging.ERROR)
    h_err.setFormatter(fmt)
    logger.addHandler(h_err)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.addHandler(logging.StreamHandler())
    
    return logger

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_wizard_msg = {}

def kb_account_list(accounts, selected_email=None):
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    buttons = []
    
    for email, username, is_temp, temp_password in accounts:
        text = f"üìß {email} {'‚úÖ' if email == selected_email else ''}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"select_account_{email}")])
    
    if selected_email:
        buttons.append([InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="change_password")])
        buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"delete_account_{selected_email}")])
    
    buttons.append([InlineKeyboardButton(text=T["to_main"], callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def kb_wizard(step):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    btns = []
    if step > 0:
        btns.append(InlineKeyboardButton(text=T["back"], callback_data="wiz_back"))
    btns.append(InlineKeyboardButton(text=T["cancel"], callback_data="wiz_cancel"))
    return InlineKeyboardMarkup(inline_keyboard=[btns])

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging()
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ {BOT_VERSION}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    load_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ 
    try:
        redis_cli = aioredis.from_url(REDIS_DSN)
        storage = RedisStorage(redis=redis_cli, state_ttl=3600)
        logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
    except Exception as e:
        logger.warning(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å: {e}")
        storage = None
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher(storage=storage) if storage else Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
    dp.message.middleware(RateLimit())
    dp.callback_query.middleware(RateLimit())
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        pool = await get_pool()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        pool = None

    # ==================== –ö–û–ú–ê–ù–î–´ ====================
    
    @dp.message(Command("start"))
    async def cmd_start(message: Message, state: FSMContext):
        await state.clear()
        await message.answer(T["start"].format(version=BOT_VERSION), reply_markup=kb_main())
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    @dp.message(Command("version"))
    async def cmd_version(message: Message):
        text = f"{T['version_pre']}{BOT_VERSION}\n\n"
        text += "üß© –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n"
        text += f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {sum(CONFIG['features'].values())}/{len(CONFIG['features'])} —Ñ—É–Ω–∫—Ü–∏–π\n"
        text += f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' if pool else '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'}\n"
        text += f"‚úÖ Redis FSM: {'–ø–æ–¥–∫–ª—é—á–µ–Ω' if storage else '–æ—Ç–∫–ª—é—á–µ–Ω'}\n"
        text += "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        text += "‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
        
        await message.answer(text, reply_markup=kb_back())
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /version –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    @dp.message(Command("admin"))
    async def cmd_admin(message: Message, state: FSMContext):
        await state.clear()
        if message.from_user.id != ADMIN_ID:
            await message.answer(T["no_access"], reply_markup=kb_back())
            return
        
        await message.answer(T["admin_panel"], reply_markup=kb_admin())
        logger.info(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

    # ==================== CALLBACK –û–°–ù–û–í–ù–´–ï ====================
    
    @dp.callback_query(F.data == "back_to_main")
    async def cb_back_main(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        try:
            await callback.message.edit_text(T["start"].format(version=BOT_VERSION), reply_markup=kb_main())
        except:
            await callback.message.answer(T["start"].format(version=BOT_VERSION), reply_markup=kb_main())
        await callback.answer()

    @dp.callback_query(F.data == "show_info")
    async def cb_show_info(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        from src.utils.file_cache import FileCache
        info_cache = FileCache("connection_info.txt")
        text = await info_cache.get()
        
        if not text:
            text = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:\n\n" + \
                   "üîó –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        await callback.message.edit_text(text, reply_markup=kb_back())
        await callback.answer()

    @dp.callback_query(F.data == "show_news")
    async def cb_show_news(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        from src.utils.file_cache import FileCache
        news_cache = FileCache("news.txt")
        text = await news_cache.get()
        
        if not text:
            text = "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n\n" + \
                   "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        
        await callback.message.edit_text(text, reply_markup=kb_back())
        await callback.answer()

    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò ====================
    
    @dp.callback_query(F.data == "my_account")
    async def cb_my_account(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        if not pool:
            await callback.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
            
        accounts = await get_account_info(pool, callback.from_user.id)
        
        if not accounts:
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n" + \
                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."
        else:
            text = T["select_account_prompt"]
        
        await callback.message.edit_text(text, reply_markup=kb_account_list(accounts) if accounts else kb_back())
        await callback.answer()
        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")

    @dp.callback_query(F.data.startswith("select_account_"))
    async def cb_select_account(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        email = callback.data.replace("select_account_", "")
        accounts = await get_account_info(pool, callback.from_user.id)
        
        if not accounts:
            await callback.message.edit_text(T["account_no_account"], reply_markup=kb_back())
            await callback.answer()
            return
        
        selected = next((acc for acc in accounts if acc[0] == email), None)
        if not selected:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        email, username, is_temp, temp_password = selected
        pwd_status = f"üîÑ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {temp_password}" if is_temp else "‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        text = f"üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n–õ–æ–≥–∏–Ω: <code>{username}</code>\nE-mail: <code>{email}</code>\n–°—Ç–∞—Ç—É—Å: {pwd_status}"
        
        await callback.message.edit_text(text, reply_markup=kb_account_list(accounts, selected_email=email))
        await callback.answer()

    @dp.callback_query(F.data == "change_password")
    async def cb_change_password(callback: CallbackQuery, state: FSMContext):
        accounts = await get_account_info(pool, callback.from_user.id)
        if not accounts:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π email –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        selected_email = None
        for email, *_ in accounts:
            if email in callback.message.text:
                selected_email = email
                break
        
        if not selected_email:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
            return
        
        await state.set_state(ChangePasswordStates.new_password)
        await state.update_data(email=selected_email)
        await callback.message.edit_text(T["change_password_prompt"], reply_markup=kb_back())
        await callback.answer()

    @dp.message(ChangePasswordStates.new_password)
    async def step_change_password(message: Message, state: FSMContext):
        data = await state.get_data()
        email = data.get("email")
        new_password = message.text.strip()
        
        if new_password in (T["to_main"], T["cancel"]):
            await state.clear()
            await message.answer(T["start"].format(version=BOT_VERSION), reply_markup=kb_main())
            return
        
        if not validate_password(new_password):
            await message.answer(T["err_pwd"])
            return
        
        try:
            await change_password(pool, email, new_password)
            await state.clear()
            await message.answer(T["change_password_success"], reply_markup=kb_main())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è")

    @dp.callback_query(F.data.startswith("delete_account_"))
    async def cb_delete_account(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        email = callback.data.replace("delete_account_", "")
        
        try:
            success = await delete_account(pool, callback.from_user.id, email)
            if success:
                await callback.message.edit_text(T["delete_account_success"], reply_markup=kb_back())
            else:
                await callback.message.edit_text(T["delete_account_error"], reply_markup=kb_back())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=kb_back())
        
        await callback.answer()

    # ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ====================
    
    @dp.callback_query(F.data == "reg_start")
    async def cb_registration_start(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        await state.set_state(RegistrationStates.nick)
        text = f"1/3 ¬∑ {T['progress'][0]}"
        
        try:
            msg = await callback.message.edit_text(text, reply_markup=kb_wizard(0))
            user_wizard_msg[callback.from_user.id] = msg.message_id
        except:
            msg = await callback.message.answer(text, reply_markup=kb_wizard(0))
            user_wizard_msg[callback.from_user.id] = msg.message_id
        
        await callback.answer()

    @dp.callback_query(F.data.in_(["wiz_back", "wiz_cancel"]))
    async def cb_wiz_nav(callback: CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        
        if callback.data == "wiz_cancel":
            await state.clear()
            await callback.message.edit_text(T["start"].format(version=BOT_VERSION), reply_markup=kb_main())
            await callback.answer()
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ wiz_back
        if current_state == RegistrationStates.nick.state:
            await state.clear()
            await callback.message.edit_text(T["start"].format(version=BOT_VERSION), reply_markup=kb_main())
        elif current_state == RegistrationStates.pwd.state:
            await state.set_state(RegistrationStates.nick)
            text = f"1/3 ¬∑ {T['progress'][0]}"
            await callback.message.edit_text(text, reply_markup=kb_wizard(0))
        elif current_state == RegistrationStates.mail.state:
            await state.set_state(RegistrationStates.pwd)
            text = f"2/3 ¬∑ {T['progress'][1]}"
            await callback.message.edit_text(text, reply_markup=kb_wizard(1))
        
        await callback.answer()

    @dp.message(RegistrationStates.nick)
    async def step_nick(message: Message, state: FSMContext):
        nick = message.text.strip()
        
        if not validate_nickname(nick):
            await message.answer(T["err_nick"])
            return
        
        await state.update_data(nick=nick)
        await state.set_state(RegistrationStates.pwd)
        text = f"2/3 ¬∑ {T['progress'][1]}"
        
        try:
            await bot.edit_message_text(
                text=text,
                chat_id=message.chat.id,
                message_id=user_wizard_msg.get(message.from_user.id),
                reply_markup=kb_wizard(1)
            )
        except:
            msg = await message.answer(text, reply_markup=kb_wizard(1))
            user_wizard_msg[message.from_user.id] = msg.message_id

    @dp.message(RegistrationStates.pwd)
    async def step_pwd(message: Message, state: FSMContext):
        pwd = message.text.strip()
        
        if not validate_password(pwd):
            await message.answer(T["err_pwd"])
            return
        
        await state.update_data(pwd=pwd)
        await state.set_state(RegistrationStates.mail)
        text = f"3/3 ¬∑ {T['progress'][2]}"
        
        try:
            await bot.edit_message_text(
                text=text,
                chat_id=message.chat.id,
                message_id=user_wizard_msg.get(message.from_user.id),
                reply_markup=kb_wizard(2)
            )
        except:
            msg = await message.answer(text, reply_markup=kb_wizard(2))
            user_wizard_msg[message.from_user.id] = msg.message_id

    @dp.message(RegistrationStates.mail)
    async def step_mail(message: Message, state: FSMContext):
        email = message.text.strip()
        
        if not validate_email(email):
            await message.answer(T["err_mail"])
            return
        
        data = await state.get_data()
        
        try:
            login, error = await register_user(pool, data["nick"], data["pwd"], email, message.from_user.id)
            await state.clear()
            
            if login:
                await message.answer(T["success"].format(username=login), reply_markup=kb_main())
            else:
                error_msg = T[error].format(max_accounts=CONFIG["settings"]["max_accounts_per_user"])
                await message.answer(error_msg, reply_markup=kb_main())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer(T["err_exists"], reply_markup=kb_main())

    # ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================
    
    @dp.callback_query(F.data == "admin_check_db")
    async def cb_admin_check_db(callback: CallbackQuery):
        if callback.from_user.id != ADMIN_ID:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
            
        if pool:
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("SELECT COUNT(*) FROM battlenet_accounts")
                    count = (await cur.fetchone())[0]
                    text = f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\nüìä –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {count}"
        else:
            text = "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
            
        await callback.message.edit_text(text, reply_markup=kb_admin_back())
        await callback.answer()

    @dp.callback_query(F.data == "admin_delete_account")
    async def cb_admin_delete_account(callback: CallbackQuery, state: FSMContext):
        if callback.from_user.id != ADMIN_ID:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await state.set_state(AdminStates.delete_account_input)
        await callback.message.edit_text(T["admin_delete_prompt"], reply_markup=kb_admin_back())
        await callback.answer()

    @dp.message(AdminStates.delete_account_input)
    async def step_admin_delete_account(message: Message, state: FSMContext):
        email = message.text.strip()
        
        if not validate_email(email):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail")
            return
        
        try:
            success = await admin_delete_account(pool, email)
            await state.clear()
            
            if success:
                await message.answer(T["admin_delete_success"].format(email=email), reply_markup=kb_admin())
            else:
                await message.answer(T["admin_delete_error"].format(error="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), reply_markup=kb_admin())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await message.answer(T["admin_delete_error"].format(error=str(e)), reply_markup=kb_admin())

    @dp.callback_query(F.data == "admin_download_log")
    async def cb_admin_download_log(callback: CallbackQuery):
        if callback.from_user.id != ADMIN_ID:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            if os.path.exists("bot.log"):
                await callback.message.answer_document(FSInputFile("bot.log"), reply_markup=kb_admin_back())
            else:
                await callback.message.edit_text("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb_admin_back())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–∞: {e}")
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb_admin_back())
        
        await callback.answer()

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    @dp.callback_query(F.data.in_(["admin_broadcast", "admin_reload_config"]))
    async def cb_admin_other_functions(callback: CallbackQuery):
        if callback.from_user.id != ADMIN_ID:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.answer("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    @dp.callback_query(F.data == "admin_back")
    async def cb_admin_back(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.edit_text(T["admin_panel"], reply_markup=kb_admin())
        await callback.answer()

    @dp.callback_query(F.data == "admin_main")
    async def cb_admin_main(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.edit_text(T["start"], reply_markup=kb_main())
        await callback.answer()

    # ==================== –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

    @dp.callback_query()
    async def cb_other(callback: CallbackQuery):
        await callback.answer("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback.data}")

    @dp.message(F.chat.type == ChatType.PRIVATE)
    async def handle_private_messages(message: Message, state: FSMContext):
        current_state = await state.get_state()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö FSM
        if current_state in (
            RegistrationStates.nick.state,
            RegistrationStates.pwd.state,
            RegistrationStates.mail.state,
            ChangePasswordStates.new_password.state,
            AdminStates.delete_account_input.state
        ):
            return
        
        if not message.text.startswith("/"):
            await message.answer("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /start", reply_markup=kb_main())

    logger.info("–í—Å–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info("–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling: {e}")
    finally:
        if pool:
            pool.close()
            await pool.wait_closed()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())