name: 🧪 Tests

on:
  push:
    branches: [main, testing, legacy]
  pull_request:
    branches: [main, testing]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: 🧪 Run module tests
        run: |
          python test_modules.py

      - name: 🔍 Run syntax checks
        run: |
          python -m py_compile main.py
          python -m py_compile src/config/settings.py
          python -m py_compile src/handlers/*.py
          python -m py_compile src/utils/*.py

      - name: 📊 Version check
        run: |
          python version_check.py

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install linting tools
        run: |
          pip install flake8 black isort

      - name: 🔍 Run flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Check code formatting
        run: |
          black --check --diff src/
          isort --check-only --diff src/

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 🛡️ Install security tools
        run: |
          pip install bandit safety

      - name: 🔒 Run security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🏗️ Test build
        run: |
          python -c "import src.config.settings; print('✅ Settings loaded')"
          python -c "import src.handlers.commands; print('✅ Handlers loaded')"
          python -c "import src.utils.validators; print('✅ Validators loaded')"
          echo "✅ Build successful"

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint, security-scan, build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔧 Integration test
        run: |
          echo "🧪 Running integration tests..."
          python test_modules.py
          echo "✅ Integration tests passed"

      - name: 📊 Summary
        run: |
          echo "🎉 All checks passed!"
          echo "✅ Unit tests"
          echo "✅ Linting"
          echo "✅ Security scan"
          echo "✅ Build test"
          echo "✅ Integration test"