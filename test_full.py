#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import asyncio
import sys
import traceback
from src.config.settings import load_config, TOKEN, ADMIN_ID, DB_HOST, DB_PORT, DB_NAME, BOT_VERSION, CONFIG
from src.database.connection import get_pool

async def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        pool = await get_pool()
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute('SELECT 1 as test')
                result = await cur.fetchone()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                await cur.execute("SHOW TABLES")
                tables = await cur.fetchall()
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: {len(tables)}")
                for table in tables:
                    print(f"   üìÑ {table[0]}")
                
        pool.close()
        await pool.wait_closed()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        traceback.print_exc()
        return False

async def test_bot_token():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    
    if TOKEN in ["YOUR_BOT_TOKEN", "TEST_TOKEN_NOT_REAL"]:
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return False
    
    try:
        from aiogram import Bot
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        
        bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{me.username} ({me.first_name})")
        print(f"   üÜî Bot ID: {me.id}")
        print(f"   üîß Can join groups: {me.can_join_groups}")
        
        await bot.session.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üß™ –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–¨–ù–û–ì–û –ë–û–¢–ê")
    print(f"üìä –í–µ—Ä—Å–∏—è: {BOT_VERSION}")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    load_config()
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {sum(CONFIG['features'].values())}/{len(CONFIG['features'])} —Ñ—É–Ω–∫—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"üë§ Admin ID: {ADMIN_ID}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_HOST}:{DB_PORT}/{DB_NAME}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    results = {}
    
    # 1. –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞
    results['bot_token'] = await test_bot_token()
    print()
    
    # 2. –¢–µ—Å—Ç –ë–î
    results['database'] = await test_database_connection()
    print()
    
    # 3. –¢–µ—Å—Ç –º–æ–¥—É–ª–µ–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã)
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from src.utils.validators import validate_email, validate_nickname, validate_password
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        test_cases = [
            ("email", "user@domain.com", validate_email, True),
            ("nickname", "TestUser123", validate_nickname, True), 
            ("password_rus", "–ø–∞—Ä–æ–ª—å123", validate_password, False),  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å False
            ("password_eng", "password123", validate_password, True)
        ]
        
        for test_name, value, validator, expected in test_cases:
            result = validator(value)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"   {status} {test_name}: {value} ‚Üí {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        
        results['validators'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞—Ö: {e}")
        results['validators'] = False
    
    try:
        from src.keyboards.user_keyboards import kb_main
        kb = kb_main()
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {len(kb.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
        results['keyboards'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö: {e}")
        results['keyboards'] = False
    
    try:
        from src.states.user_states import RegistrationStates
        states = [RegistrationStates.nick, RegistrationStates.pwd, RegistrationStates.mail]
        print(f"‚úÖ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {len(states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        results['states'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö: {e}")
        results['states'] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {status} {test_name}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    elif results['bot_token'] and results['database']:
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É! (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏/–∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    return passed_tests == total_tests

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)