#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –ë–î)
"""
import asyncio
import sys
from src.config.settings import load_config, TOKEN, ADMIN_ID, BOT_VERSION, CONFIG

def test_modules():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print(f"üìä –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}")
    print("=" * 50)
    
    load_config()
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {sum(CONFIG['features'].values())}/{len(CONFIG['features'])} —Ñ—É–Ω–∫—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ")
    print(f"üë§ Admin ID: {ADMIN_ID}")
    print()
    
    results = {}
    
    # 1. –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    try:
        from src.config.settings import DB_HOST, DB_PORT, DB_NAME
        from src.config.translations import TRANSLATIONS
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã: {len(TRANSLATIONS)} —Å—Ç—Ä–æ–∫")
        print(f"   üìß –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {TRANSLATIONS['start'][:30]}...")
        results['config'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        results['config'] = False
    
    # 2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤  
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤...")
    try:
        from src.utils.validators import validate_email, validate_nickname, validate_password
        
        tests = [
            ("Email (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π)", "user@example.com", validate_email, True),
            ("Email (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π)", "invalid-email", validate_email, False),
            ("–ù–∏–∫–Ω–µ–π–º (–ª–∞—Ç–∏–Ω–∏—Ü–∞)", "User123", validate_nickname, True),
            ("–ù–∏–∫–Ω–µ–π–º (—Å —Å–∏–º–≤–æ–ª–∞–º–∏)", "User@123", validate_nickname, False),
            ("–ü–∞—Ä–æ–ª—å (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)", "password123", validate_password, True),
            ("–ü–∞—Ä–æ–ª—å (—Ä—É—Å—Å–∫–∏–π)", "–ø–∞—Ä–æ–ª—å123", validate_password, False)
        ]
        
        all_passed = True
        for name, value, func, expected in tests:
            result = func(value)
            status = "‚úÖ" if result == expected else "‚ùå"
            if result != expected:
                all_passed = False
            print(f"   {status} {name}: '{value}' ‚Üí {result}")
        
        results['validators'] = all_passed
        if all_passed:
            print("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤: {e}")
        results['validators'] = False
    
    # 3. –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    try:
        from src.keyboards.user_keyboards import kb_main, kb_back, kb_wizard
        from src.keyboards.admin_keyboards import kb_admin, kb_admin_back
        
        main_kb = kb_main()
        print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(main_kb.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        back_kb = kb_back()
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ '–ù–∞–∑–∞–¥': {len(back_kb.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        wizard_kb = kb_wizard(1)
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞: {len(wizard_kb.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        admin_kb = kb_admin()
        print(f"‚úÖ –ê–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(admin_kb.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        results['keyboards'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        results['keyboards'] = False
    
    # 4. –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    try:
        from src.states.user_states import (
            RegistrationStates, ForgotPasswordStates, 
            AdminStates, ChangePasswordStates
        )
        
        reg_states = [RegistrationStates.nick, RegistrationStates.pwd, RegistrationStates.mail]
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {len(reg_states)}")
        for state in reg_states:
            print(f"   üìù {state.state}")
        
        forgot_states = [ForgotPasswordStates.email]
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {len(forgot_states)}")
        
        admin_states = [AdminStates.broadcast_text, AdminStates.delete_account_input]
        print(f"‚úÖ –ê–¥–º–∏–Ω —Å–æ—Å—Ç–æ—è–Ω–∏—è: {len(admin_states)}")
        
        results['states'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        results['states'] = False
    
    # 5. –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç...")
    try:
        from src.utils.file_cache import FileCache
        from src.utils.middleware import RateLimit
        
        print("‚úÖ FileCache –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ RateLimit middleware –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –∫—ç—à–∞ —Ñ–∞–π–ª–æ–≤
        cache = FileCache("test_nonexistent.txt")
        content = asyncio.run(cache.get())
        print(f"‚úÖ –ö—ç—à —Ñ–∞–π–ª–æ–≤: –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª ‚Üí '{content}' (–æ–∂–∏–¥–∞–ª–æ—Å—å –ø—É—Å—Ç–æ)")
        
        results['utils'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏—Ç: {e}")
        results['utils'] = False
    
    # 6. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–∏–º–ø–æ—Ä—Ç—ã)
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–∏–º–ø–æ—Ä—Ç—ã)...")
    try:
        from src.handlers.commands import register_command_handlers, register_callback_handlers
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥")
        
        from src.handlers.registration import register_registration_handlers  
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        
        from src.handlers.account_management import register_account_handlers
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        from src.handlers.admin import register_admin_handlers
        print("‚úÖ –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
        
        from src.handlers.messages import register_message_handlers
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        results['handlers'] = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        results['handlers'] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–û–î–£–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    total = len(results)
    passed = sum(results.values())
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {status.ljust(12)} {test_name}")
    
    print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    if passed == total:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! –í—Å—è –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ë–î")
    elif passed >= total * 0.8:
        print(f"\nüëç –•–û–†–û–®–û! {passed}/{total} –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚ö° –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò: —Ç–æ–ª—å–∫–æ {passed}/{total} –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    return passed == total

if __name__ == "__main__":
    try:
        success = test_modules()
        print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {'—É—Å–ø–µ—à–Ω–æ' if success else '—á–∞—Å—Ç–∏—á–Ω–æ'} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)