"""
–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.client.default import DefaultBotProperties

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.config.settings import load_config, TOKEN, BOT_VERSION, CONFIG
from src.config.translations import TRANSLATIONS as T
from src.keyboards.user_keyboards import kb_main, kb_back
from src.utils.validators import validate_email, validate_nickname, validate_password

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = logging.getLogger("bot")
    logger.setLevel(logging.INFO)
    logger.addHandler(logging.StreamHandler())
    return logger

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    logger = setup_logging()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {BOT_VERSION}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    load_config()
    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(CONFIG['features'])} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    if TOKEN == "TEST_TOKEN_NOT_REAL":
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ Telegram")
        logger.info("‚úÖ –ù–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return
    
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        await message.answer(T["start"], reply_markup=kb_main())
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª /start")
    
    @dp.message(Command("version"))
    async def cmd_version(message: Message):
        text = f"{T['version_pre']}{BOT_VERSION}\n\nüì¶ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã\n‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã\n‚úÖ –ö—ç—à —Ñ–∞–π–ª–æ–≤\n‚úÖ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        await message.answer(text, reply_markup=kb_back())
        logger.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏")
    
    @dp.message(Command("test"))
    async def cmd_test(message: Message):
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
        tests = [
            f"üìß Email test@mail.ru: {'‚úÖ' if validate_email('test@mail.ru') else '‚ùå'}",
            f"üë§ Nickname Test123: {'‚úÖ' if validate_nickname('Test123') else '‚ùå'}",
            f"üîê Password (—Ä—É—Å): {'‚ùå' if validate_password('–ø–∞—Ä–æ–ª—å') else '‚úÖ'} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ)",
            f"üîê Password (eng): {'‚úÖ' if validate_password('password') else '‚ùå'}",
        ]
        
        text = "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:\n\n" + "\n".join(tests)
        text += f"\n\nüìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sum(CONFIG['features'].values())}"
        
        await message.answer(text)
        logger.info(f"üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π")
    
    @dp.callback_query()
    async def handle_callbacks(callback: CallbackQuery):
        await callback.answer("üîß –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ")
        logger.info(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω callback: {callback.data}")
    
    @dp.message()
    async def echo_handler(message: Message):
        await message.answer(
            "ü§ñ –ú–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏\n"
            "/test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π\n\n"
            "‚ú® –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        )
    
    logger.info("üéØ –ú–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())